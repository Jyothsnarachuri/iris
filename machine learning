# 0. Setup: import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. Load the data
iris = load_iris()
X = iris.data
y = iris.target
feature_names = iris.feature_names
target_names = iris.target_names

# 2. Create a DataFrame for exploration
df = pd.DataFrame(X, columns=feature_names)
df['target'] = y
df['species'] = df['target'].apply(lambda i: target_names[i])

# 3. Exploratory Data Analysis (EDA)
print(df.head())
print(df.describe())
print(df['species'].value_counts())

sns.pairplot(df, hue='species')
plt.show()

sns.heatmap(df[feature_names].corr(), annot=True, cmap='coolwarm')
plt.show()

# 4. Data Preprocessing
# Check missing values
print(df.isnull().sum())

# Split into training & test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, random_state=42, stratify=y
)

# Feature scaling (optional but good practice)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 5. Model training â€“ try a simple model
model1 = LogisticRegression(max_iter=200)
model1.fit(X_train_scaled, y_train)

# 6. Model evaluation
y_pred1 = model1.predict(X_test_scaled)
print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred1))
print(classification_report(y_test, y_pred1, target_names=target_names))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred1))

# 7. Try another model to compare
model2 = DecisionTreeClassifier(random_state=42)
model2.fit(X_train, y_train)  # using un-scaled data for this model
y_pred2 = model2.predict(X_test)
print("Decision Tree Accuracy:", accuracy_score(y_test, y_pred2))
print(classification_report(y_test, y_pred2, target_names=target_names))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred2))

